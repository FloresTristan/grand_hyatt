{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Mata/Documents/GitHub/grand_hyatt/lib/supabase/server.ts"],"sourcesContent":["\r\nimport { cookies } from 'next/headers';\r\nimport { createServerClient, type CookieOptions } from '@supabase/ssr';\r\n\r\nexport async function createSupabaseServer() {\r\n  const cookieStore = await cookies();\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: true, // keep reading/writing sb- cookies via the handlers below\r\n      },\r\n      cookies: {\r\n        get(name: string) {\r\n          return cookieStore.get(name)?.value;\r\n        },\r\n        set(name: string, value: string, options: CookieOptions) {\r\n          try {\r\n            cookieStore.set({ name, value, ...options });\r\n          } catch {\r\n            // no-op in RSC (only works in route handlers/actions)\r\n          }\r\n        },\r\n        remove(name: string, options: CookieOptions) {\r\n          try {\r\n            cookieStore.set({ name, value: '', ...options });\r\n          } catch {\r\n            // no-op in RSC\r\n          }\r\n        },\r\n      },\r\n    }\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;AACA;AACA;AAAA;;;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,MAAM;YACJ,kBAAkB;YAClB,gBAAgB;QAClB;QACA,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAsB;gBACrD,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM;wBAAO,GAAG,OAAO;oBAAC;gBAC5C,EAAE,OAAM;gBACN,sDAAsD;gBACxD;YACF;YACA,QAAO,IAAY,EAAE,OAAsB;gBACzC,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM,OAAO;wBAAI,GAAG,OAAO;oBAAC;gBAChD,EAAE,OAAM;gBACN,eAAe;gBACjB;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Mata/Documents/GitHub/grand_hyatt/lib/supabase/admin.ts"],"sourcesContent":["\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nexport function createSupabaseAdmin() {\r\n  return createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY! \r\n  );\r\n}\r\n"],"names":[],"mappings":";;;AACA;;AAEO,SAAS;IACd,OAAO,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,gFAEhB,QAAQ,GAAG,CAAC,yBAAyB;AAEzC","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Mata/Documents/GitHub/grand_hyatt/src/app/api/admin/seasons/create/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { createSupabaseServer } from '../../../../../../lib/supabase/server';\r\nimport { createSupabaseAdmin } from '../../../../../../lib/supabase/admin';\r\n\r\nexport const runtime = 'nodejs';\r\nexport const dynamic = 'force-dynamic';\r\nexport const revalidate = 0;\r\n\r\nconst BUCKET = 'seasons';\r\n\r\n/** Minimal shape for bucket fields (SDKs differ in casing) */\r\ntype BucketInfo = {\r\n  allowedMimeTypes?: string[];\r\n  allowed_mime_types?: string[];\r\n  fileSizeLimit?: number | string;\r\n  file_size_limit?: number | string;\r\n};\r\n\r\nfunction toNumber(n: number | string | undefined): number {\r\n  if (typeof n === 'number') return n;\r\n  if (typeof n === 'string') {\r\n    const v = Number(n);\r\n    return Number.isFinite(v) ? v : 0;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction isFile(v: FormDataEntryValue | null): v is File {\r\n  return typeof File !== 'undefined' && v instanceof File;\r\n}\r\n\r\nasync function ensureBucket(): Promise<void> {\r\n  const admin = createSupabaseAdmin();\r\n  const { data: bucket, error: getErr } = await admin.storage.getBucket(BUCKET);\r\n  if (getErr && !bucket) throw getErr;\r\n\r\n  if (!bucket) {\r\n    const { error: cErr } = await admin.storage.createBucket(BUCKET, {\r\n      public: true,\r\n      fileSizeLimit: 50 * 1024 * 1024, // 50MB\r\n      allowedMimeTypes: ['image/png', 'image/jpeg', 'image/webp', 'image/gif'],\r\n    });\r\n    if (cErr) throw cErr;\r\n    return;\r\n  }\r\n\r\n  const info = bucket as unknown as BucketInfo;\r\n  const existing = info.allowedMimeTypes ?? info.allowed_mime_types ?? [];\r\n  const wants = ['image/png', 'image/jpeg', 'image/webp', 'image/gif'];\r\n  const merged = Array.from(new Set([...existing, ...wants]));\r\n  const currentLimit = Math.max(\r\n    toNumber(info.fileSizeLimit ?? info.file_size_limit),\r\n    50 * 1024 * 1024\r\n  );\r\n\r\n  const { error: uErr } = await admin.storage.updateBucket(BUCKET, {\r\n    public: true,\r\n    fileSizeLimit: currentLimit,\r\n    allowedMimeTypes: merged,\r\n  });\r\n  if (uErr && !String(uErr.message).includes('No changes')) throw uErr;\r\n}\r\n\r\nfunction pickExtAndMime(file: File): { ext: string; contentType: string } {\r\n  const name = (file.name || '').toLowerCase();\r\n  const extFromName = name.includes('.') ? name.split('.').pop() ?? '' : '';\r\n  const mime = (file.type || '').toLowerCase();\r\n\r\n  let ext = extFromName;\r\n  if (!ext) {\r\n    if (mime.includes('png')) ext = 'png';\r\n    else if (mime.includes('jpeg') || mime.includes('jpg')) ext = 'jpg';\r\n    else if (mime.includes('webp')) ext = 'webp';\r\n    else if (mime.includes('gif')) ext = 'gif';\r\n    else ext = 'bin';\r\n  }\r\n\r\n  let contentType = mime;\r\n  if (!contentType) {\r\n    if (ext === 'png') contentType = 'image/png';\r\n    else if (ext === 'jpg' || ext === 'jpeg') contentType = 'image/jpeg';\r\n    else if (ext === 'webp') contentType = 'image/webp';\r\n    else if (ext === 'gif') contentType = 'image/gif';\r\n    else contentType = 'application/octet-stream';\r\n  }\r\n\r\n  return { ext, contentType };\r\n}\r\n\r\nasync function uploadFile(file: File, folder: 'images' | 'gifs'): Promise<string> {\r\n  const admin = createSupabaseAdmin();\r\n  const buf = Buffer.from(await file.arrayBuffer());\r\n  const { ext, contentType } = pickExtAndMime(file);\r\n  const id = crypto.randomUUID();\r\n  const objectPath = `${folder}/${id}.${ext}`;\r\n\r\n  const { error: upErr } = await admin.storage\r\n    .from(BUCKET)\r\n    .upload(objectPath, buf, { contentType, upsert: false });\r\n  if (upErr) throw upErr;\r\n\r\n  const { data: pub } = admin.storage.from(BUCKET).getPublicUrl(objectPath);\r\n  return pub.publicUrl;\r\n}\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const supa = await createSupabaseServer();\r\n\r\n    const { data: userWrap } = await supa.auth.getUser();\r\n    const user = userWrap?.user ?? null;\r\n    if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n\r\n    const form = await req.formData();\r\n    const nameRaw = form.get('name');\r\n    const name = typeof nameRaw === 'string' ? nameRaw.trim() : '';\r\n\r\n    if (!name) return NextResponse.json({ error: 'Season name required' }, { status: 400 });\r\n\r\n    // Accept: image (static), gif (animated), or fallback file\r\n    const imageEntry = form.get('image');\r\n    const gifEntry = form.get('gif');\r\n    const fallbackEntry = form.get('file');\r\n\r\n    let imageFile: File | null = isFile(imageEntry) ? imageEntry : null;\r\n    let gifFile: File | null = isFile(gifEntry) ? gifEntry : null;\r\n\r\n    if (!imageFile && !gifFile && isFile(fallbackEntry)) {\r\n      const mime = (fallbackEntry.type || '').toLowerCase();\r\n      if (mime.includes('gif')) gifFile = fallbackEntry;\r\n      else imageFile = fallbackEntry;\r\n    }\r\n\r\n    await ensureBucket();\r\n\r\n    let imageUrl: string | null = null;\r\n    let gifUrl: string | null = null;\r\n\r\n    if (imageFile) imageUrl = await uploadFile(imageFile, 'images');\r\n    if (gifFile) gifUrl = await uploadFile(gifFile, 'gifs');\r\n\r\n    const { data: row, error: insErr } = await supa\r\n      .from('seasons')\r\n      .insert({ name, image_url: imageUrl, gif_url: gifUrl })\r\n      .select('id,name,image_url,gif_url,created_at')\r\n      .single();\r\n\r\n    if (insErr) {\r\n      return NextResponse.json({ error: insErr.message }, { status: 500 });\r\n    }\r\n\r\n    return NextResponse.json({ item: row });\r\n  } catch (e: unknown) {\r\n    const message = e instanceof Error ? e.message : 'Server error';\r\n    return NextResponse.json({ error: message }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}